{"version":3,"sources":["firebase.js","components/Linkform.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Linkform","addOrEditLink","currentId","initialState","links","url","name","description","useState","values","setValues","hundleChange","e","target","value","validateURL","str","test","getLinkById","id","a","collection","doc","get","data","useEffect","className","onSubmit","preventDefault","Swal","fire","type","placeholder","onChange","rows","Links","setLinks","setCurrentId","linkObject","newTask","set","update","onDeleteLink","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","delete","getLinks","onSnapshot","querySnapshot","docs","forEach","push","map","link","style","background","key","cursor","onClick","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98b38d38.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n\tapiKey: 'AIzaSyDrv6D_vhy3Gau5n2FfFRZfd5mpbj1RaC8',\n\tauthDomain: 'fb-react-crud-1945a.firebaseapp.com',\n\tdatabaseURL: 'https://fb-react-crud-1945a.firebaseio.com',\n\tprojectId: 'fb-react-crud-1945a',\n\tstorageBucket: 'fb-react-crud-1945a.appspot.com',\n\tmessagingSenderId: '955777545387',\n\tappId: '1:955777545387:web:22437939ae3368a449b3ee',\n}\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig)\nexport const db = fb.firestore()\n","import React, { useState, useEffect } from 'react'\nimport { db } from '../firebase'\n\nimport Swal from 'sweetalert2'\n\nexport const Linkform = ({ addOrEditLink, currentId, links }) => {\n\tconst initialState = {\n\t\turl: '',\n\t\tname: '',\n\t\tdescription: '',\n\t}\n\n\t// para definir estados\n\tconst [values, setValues] = useState(initialState)\n\n\tconst hundleSubmit = (e) => {\n\t\te.preventDefault()\n\n\t\tif (!validateURL(values.url)) {\n\t\t\treturn Swal.fire('Upss', 'Link incorrect.', 'error')\n\t\t}\n\n\t\taddOrEditLink(values)\n\n\t\tsetValues(initialState)\n\t}\n\tconst hundleChange = (e) => {\n\t\tconst { name, value } = e.target\n\t\tsetValues({ ...values, [name]: value })\n\t}\n\n\tconst validateURL = (str) => {\n\t\treturn /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n\t\t\tstr\n\t\t)\n\t}\n\n\tconst getLinkById = async (id) => {\n\t\tconst doc = await db.collection('links').doc(id).get()\n\t\tsetValues({ ...doc.data() })\n\t}\n\n\tuseEffect(() => {\n\t\tif (currentId === '') {\n\t\t\tsetValues(initialState)\n\t\t} else {\n\t\t\tgetLinkById(currentId)\n\t\t}\n\t}, [currentId]) // eslint-disable-line\n\n\treturn (\n\t\t<form className='card card-body bg-primary' onSubmit={hundleSubmit}>\n\t\t\t<div className='form-group input-group'>\n\t\t\t\t<div className='input-group-text bg-light'>\n\t\t\t\t\t<i className='material-icons'>insert_link</i>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tclassName='form-control'\n\t\t\t\t\tplaceholder='https://someurl.com'\n\t\t\t\t\tname='url'\n\t\t\t\t\tvalue={values.url}\n\t\t\t\t\tonChange={hundleChange}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div className='form-group input-group'>\n\t\t\t\t<div className='input-group-text bg-light'>\n\t\t\t\t\t<i className='material-icons'>create</i>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tclassName='form-control'\n\t\t\t\t\tplaceholder='Website Name'\n\t\t\t\t\tname='name'\n\t\t\t\t\tvalue={values.name}\n\t\t\t\t\tonChange={hundleChange}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div className='form-group'>\n\t\t\t\t<textarea\n\t\t\t\t\tname='description'\n\t\t\t\t\trows='3'\n\t\t\t\t\tclassName='form-control'\n\t\t\t\t\tplaceholder='Write a description'\n\t\t\t\t\tvalue={values.description}\n\t\t\t\t\tonChange={hundleChange}\n\t\t\t\t></textarea>\n\t\t\t</div>\n\n\t\t\t<div className='form-group text-center'>\n\t\t\t\t<button className='btn btn-success px-5'>\n\t\t\t\t\t{currentId === '' ? 'Save' : 'Update'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default Linkform\n","import React, { useEffect, useState } from 'react'\n\nimport Swal from 'sweetalert2'\nimport { db } from '../firebase'\n\n// components\nimport LinkForm from './Linkform'\n\nconst Links = () => {\n\tconst [links, setLinks] = useState([])\n\tconst [currentId, setCurrentId] = useState('')\n\n\tconst addOrEditLink = async (linkObject) => {\n\t\tconst { url, name, description } = linkObject\n\t\tlet newTask = {\n\t\t\turl,\n\t\t\tname,\n\t\t\tdescription,\n\t\t}\n\n\t\tif (currentId === '') {\n\t\t\tif (!url || !name || !description) {\n\t\t\t\tSwal.fire('Upss!!', 'Complete all fields please.', 'warning')\n\t\t\t} else {\n\t\t\t\tawait db.collection('links').doc().set(newTask)\n\t\t\t\tSwal.fire('Great!!', 'Task added successfully.', 'success')\n\t\t\t}\n\t\t} else {\n\t\t\tawait db.collection('links').doc(currentId).update(newTask)\n\t\t\tSwal.fire('Great!!', 'Task updated successfully.', 'success')\n\n\t\t\tsetCurrentId('')\n\t\t}\n\t}\n\n\tconst onDeleteLink = async (id) => {\n\t\tconst result = await Swal.fire({\n\t\t\ttitle: 'Warning!!!',\n\t\t\ttext: 'Are you sure you want to delete this link?',\n\t\t\ticon: 'warning',\n\t\t\tshowCancelButton: true,\n\t\t\tconfirmButtonColor: '#3085d6',\n\t\t\tcancelButtonColor: '#d33',\n\t\t\tconfirmButtonText: 'Yes, delete it!',\n\t\t})\n\n\t\tif (result.isConfirmed) {\n\t\t\tawait db.collection('links').doc(id).delete()\n\t\t\tSwal.fire('Deleted!', 'Your task has been deleted.', 'success')\n\t\t}\n\t}\n\n\tconst getLinks = async () => {\n\t\t// onSnapshot se ejecuta cada vez que hay un cambio en la db\n\t\tdb.collection('links').onSnapshot((querySnapshot) => {\n\t\t\tconst docs = []\n\n\t\t\tquerySnapshot.forEach((doc) => {\n\t\t\t\tdocs.push({ ...doc.data(), id: doc.id })\n\t\t\t})\n\n\t\t\tsetLinks(docs)\n\t\t})\n\t}\n\n\t// se ejecuta siempre que carga la pagina\n\tuseEffect(() => {\n\t\tgetLinks()\n\t}, [])\n\n\treturn (\n\t\t<div className='col-12'>\n\t\t\t<div className='col-12 col-md-5 mx-auto mb-4'>\n\t\t\t\t<LinkForm {...{ addOrEditLink, currentId, links }} />\n\t\t\t</div>\n\n\t\t\t<div className='col-12 col-md-7 mx-auto'>\n\t\t\t\t{links.map((link) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName='card mt-2'\n\t\t\t\t\t\t\tstyle={{ background: '#8BC34A' }}\n\t\t\t\t\t\t\tkey={link.id}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t\t\t<div className='d-flex justify-content-between'>\n\t\t\t\t\t\t\t\t\t<h3 className='card-title'>{link.name}</h3>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\n\t\t\t\t\t\t\t\t\t\t\tclassName='material-icons text-danger'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tonDeleteLink(link.id)\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tclose\n\t\t\t\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\n\t\t\t\t\t\t\t\t\t\t\tclassName='material-icons text-primary'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => setCurrentId(link.id)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tcreate\n\t\t\t\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<p className='text-dark'>{link.description}</p>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclassName='btn btn-info'\n\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\thref={link.url}\n\t\t\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tVisit Website\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Links\n","import React from 'react'\nimport './App.css'\n\n// components\nimport Links from './components/Links'\n\nfunction App() {\n\treturn (\n\t\t<div className='container p-4'>\n\t\t\t<div className='row'>\n\t\t\t\t<Links />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './firebase'\nimport 'bootswatch/dist/spacelab/bootstrap.min.css'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}